syntax = "proto3";

package mcpchain.toolregistry;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "mcpchain/toolregistry/params.proto";
import "mcpchain/toolregistry/registered_server.proto";

option go_package = "mcpchain/x/toolregistry/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mcpchain/toolregistry/params";
  
  }
  
  // Queries a list of ServerById items.
  rpc ServerById (QueryServerByIdRequest) returns (QueryServerByIdResponse) {
    option (google.api.http).get = "/mcpchain/toolregistry/server_by_id/{id}";
  
  }
  
  // Queries a list of ServersByOwner items.
  rpc ServersByOwner (QueryServersByOwnerRequest) returns (QueryServersByOwnerResponse) {
    option (google.api.http).get = "/mcpchain/toolregistry/servers_by_owner/{ownerAddress}";
  
  }
  
  // Queries a list of AllServers items.
  rpc AllServers (QueryAllServersRequest) returns (QueryAllServersResponse) {
    option (google.api.http).get = "/mcpchain/toolregistry/all_servers";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryServerByIdRequest {
  uint64 id = 1;
}

message QueryServerByIdResponse {
  RegisteredServer server = 1;
}

message QueryServersByOwnerRequest {
  string ownerAddress = 1;
}

message QueryServersByOwnerResponse {
  repeated RegisteredServer servers = 1;
}

message QueryAllServersRequest {}

message QueryAllServersResponse {
  repeated RegisteredServer servers = 1;
}


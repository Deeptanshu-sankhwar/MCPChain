// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mcpchain/toolregistry/state_record.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakeRecord struct {
	ServerId      uint64 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Amount        string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	StakerAddress string `protobuf:"bytes,3,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
}

func (m *StakeRecord) Reset()         { *m = StakeRecord{} }
func (m *StakeRecord) String() string { return proto.CompactTextString(m) }
func (*StakeRecord) ProtoMessage()    {}
func (*StakeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa60bc341efb78f1, []int{0}
}
func (m *StakeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeRecord.Merge(m, src)
}
func (m *StakeRecord) XXX_Size() int {
	return m.Size()
}
func (m *StakeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StakeRecord proto.InternalMessageInfo

func (m *StakeRecord) GetServerId() uint64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *StakeRecord) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *StakeRecord) GetStakerAddress() string {
	if m != nil {
		return m.StakerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*StakeRecord)(nil), "mcpchain.toolregistry.StakeRecord")
}

func init() {
	proto.RegisterFile("mcpchain/toolregistry/state_record.proto", fileDescriptor_fa60bc341efb78f1)
}

var fileDescriptor_fa60bc341efb78f1 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xc8, 0x4d, 0x2e, 0x48,
	0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2f, 0xc9, 0xcf, 0xcf, 0x29, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x29,
	0xaa, 0xd4, 0x2f, 0x2e, 0x49, 0x2c, 0x49, 0x8d, 0x2f, 0x4a, 0x4d, 0xce, 0x2f, 0x4a, 0xd1, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x85, 0xa9, 0xd4, 0x43, 0x56, 0xa9, 0x94, 0xc9, 0xc5, 0x1d,
	0x5c, 0x92, 0x98, 0x9d, 0x1a, 0x04, 0x56, 0x2b, 0x24, 0xcd, 0xc5, 0x59, 0x9c, 0x5a, 0x54, 0x96,
	0x5a, 0x14, 0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12, 0xc4, 0x01, 0x11, 0xf0, 0x4c,
	0x11, 0x12, 0xe3, 0x62, 0x4b, 0xcc, 0xcd, 0x2f, 0xcd, 0x2b, 0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0,
	0x0c, 0x82, 0xf2, 0x84, 0x54, 0xb9, 0xf8, 0x8a, 0x41, 0x66, 0x14, 0xc5, 0x27, 0xa6, 0xa4, 0x14,
	0xa5, 0x16, 0x17, 0x4b, 0x30, 0x83, 0xe5, 0x79, 0x21, 0xa2, 0x8e, 0x10, 0x41, 0x27, 0xf3, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x92, 0x85, 0xfb, 0xa2, 0x02, 0xd5, 0x1f,
	0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x1f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x0c, 0xf2, 0xcb, 0x1e, 0xed, 0x00, 0x00, 0x00,
}

func (m *StakeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerAddress) > 0 {
		i -= len(m.StakerAddress)
		copy(dAtA[i:], m.StakerAddress)
		i = encodeVarintStateRecord(dAtA, i, uint64(len(m.StakerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintStateRecord(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.ServerId != 0 {
		i = encodeVarintStateRecord(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStateRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovStateRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerId != 0 {
		n += 1 + sovStateRecord(uint64(m.ServerId))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovStateRecord(uint64(l))
	}
	l = len(m.StakerAddress)
	if l > 0 {
		n += 1 + l + sovStateRecord(uint64(l))
	}
	return n
}

func sovStateRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStateRecord(x uint64) (n int) {
	return sovStateRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStateRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStateRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStateRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStateRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStateRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStateRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStateRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStateRecord = fmt.Errorf("proto: unexpected end of group")
)
